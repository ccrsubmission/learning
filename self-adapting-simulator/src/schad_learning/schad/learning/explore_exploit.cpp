#include "explore_exploit.h"

#include <schad/learning/learning_method_factory_helper.h>

namespace {
using namespace schad;
using namespace learning;

class ExploreExploitLearningMethod : public LearningMethod {
public:
    ExploreExploitLearningMethod(
        unique_ptr<ArmIdentificationMethod> explorer) 
        : is_explore_{true}, explorer_{move(explorer)} {
    }

    void report_rewards(vector<optional<Reward>> const& rewards) override {
        if (is_explore_) {
            explorer_->report_rewards(rewards);
        }
    }
    auto choose() -> vector<size_t> override {
        if (explorer_->get_best().has_value()) {
            is_explore_ = false;
        }
        if (is_explore_) {
            return explorer_->choose();
        } else {
            return {explorer_->get_best().value()};
        }
    }

private:
    bool is_explore_;
    unique_ptr<ArmIdentificationMethod> const explorer_;
};

}

auto schad::learning::create_explore_exploit(
        size_t                                     time_limit,
        shared_ptr<ArmIdentificationMethodFactory> explorer
        )
        -> unique_ptr<LearningMethodFactory> {
    return create_learning_factory(
        [time_limit,explorer] (shared_ptr<rng_t> rng, size_t num_arms) {
            return make_unique<ExploreExploitLearningMethod>(
                explorer->instantiate(rng, num_arms, time_limit)
            );
        },
        {{"type", "explore_exploit"},
         {"parameters", {"time_limit", time_limit},
                        {"base"      , *explorer}}}
    );
}
